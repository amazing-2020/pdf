#include <cstring>
#include <iostream>


// 2

using std::cout;
using std::strncpy;
class Frabjous {
    private:
        char fab[20];
    public:
        Frabjous(const char * s = "C++") {
            strncpy(fab, s, 20);
         }
        virtual void tell() { cout << fab; }
};
class Gloam {
    private:
        int glip;
        Frabjous fb;
    public:
        Gloam(int g = 0, const char * s = "C++") : glip(g), fb(s) {}
        Gloam(int g, const Frabjous & f) : glip(g), fb(f) {}
        void tell() {
            fb.tell();
            cout << " " << glip << std::endl;
        }
};


//3
class Frabjous3 {
    private:
        char fab[20];
    public:
        Frabjous3(const char * s = "C++") {
            strncpy(fab, s, 20);
         }
        virtual void tell() { cout << fab; }
};

class Gloam3 : private Frabjous3 {
    private:
        int glip;
    public:
        Gloam3(int g = 0, const char * s = "C++") : glip(g), Frabjous3(s) {}
        Gloam3(int g, const Frabjous3 & f) :  glip(g), Frabjous3(f) {}
        void tell() {
            Frabjous3::tell();
            cout << " " << glip << std::endl;
        }
};


// 4

class Stack<Worker *> {
    private:
        enum {MAX = 10};
        Worker items[MAX];
        int top;
    public:
        Stack();
        bool isempty();
        bool isfull();
        bool push(const Worker & item);
        bool pop(Worker & item);
};

//5


